<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mingguo.avarua.casual.account.service.repository.dao.UserRoleRelationDao">
    <resultMap id="RelationResultMap" type="com.mingguo.avarua.casual.account.model.UserRoleRelation">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="role_id" property="roleId"/>
        <result column="create_time" property="createTime"/>
        <result column="_timestamp" property="updateTime"/>
    </resultMap>

    <sql id="Relation_Column_List" >
        id, user_id, role_id, create_time, _timestamp
    </sql>

    <!--addRelation-->
    <insert id="addRelation" parameterType="com.mingguo.avarua.casual.account.model.UserRoleRelation" >
        INSERT INTO user_role_relation(user_id, role_id, create_time)
        VALUES (#{userId}, #{roleId}, now())
        <selectKey resultType="int" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!--updateRelation-->
    <update id="updateRelation" parameterType="com.mingguo.avarua.casual.account.model.UserRoleRelation">
        UPDATE user_role_relation
        <set>
            <if test="userId != null and userId != 0">
                user_id = #{userId}
            </if>
            <if test="roleId != null and roleId != 0">
                role_id = #{roleId}
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <!--deleteByIds-->
    <delete id="deleteByIds" parameterType="java.util.List" >
        DELETE FROM user_role_relation WHERE id IN
        <foreach item="item" collection="list" separator="," open="(" close=")" index="">
            #{item}
        </foreach>
    </delete>

    <!--getRelationById-->
    <select id="getRelationById" resultMap="RelationResultMap" parameterType="java.lang.Integer" >
        SELECT <include refid="Relation_Column_List" /> FROM user_role_relation
        WHERE id = #{id}
    </select>

    <!--deleteByUserRole-->
    <delete id="deleteByUserRole" parameterType="java.util.Map" >
        DELETE FROM user_role_relation
        WHERE user_id = #{userId} AND role_id = #{roleId}
    </delete>

    <!--getCountByRoleId-->
    <select id="getCountByRoleId" parameterType="java.lang.Integer">
        SELECT COUNT(1) FROM user_role_relation
        WHERE role_id = #{roleId}
    </select>

    <!--getRelationsByRoleId-->
    <select id="getRelationsByRoleId" resultMap="RelationResultMap" parameterType="java.util.Map" >
        SELECT <include refid="Relation_Column_List" /> FROM user_role_relation
        WHERE role_id = #{roleId} LIMIT #{offset}, #{limit}
    </select>

    <!--getRelationsByUserIds-->
    <select id="getRelationsByUserIds" resultMap="RelationResultMap" parameterType="java.util.List" >
        SELECT <include refid="Relation_Column_List" /> FROM user_role_relation WHERE user_id IN
        <foreach item="item" collection="list" separator="," open="(" close=")" index="">
            #{item}
        </foreach>
    </select>

    <!--getRelationsByUserId-->
    <select id="getRelationsByUserId" resultMap="RelationResultMap" parameterType="java.lang.Integer" >
        SELECT <include refid="Relation_Column_List" /> FROM user_role_relation
        WHERE role_id = #{roleId}
    </select>

    <!--getRelationByUserIdAndRoleId-->
    <select id="getRelationByUserIdAndRoleId" resultMap="RelationResultMap" parameterType="java.util.Map" >
        SELECT <include refid="Relation_Column_List" /> FROM user_role_relation
        WHERE user_id = #{userId} AND role_id = {roleId}
    </select>

 </mapper>